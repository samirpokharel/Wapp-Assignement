@model SimpleLMS.Models.QuizAttempt

@{
    ViewData["Title"] = "Take Quiz";
    var timeRemaining = ViewBag.TimeRemaining as int? ?? 30;
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800">
    <div class="container mx-auto px-4 py-8">
        <div class="max-w-4xl mx-auto">
            <!-- Header with Timer -->
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 mb-8">
                <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                    <div class="flex items-center justify-between">
                        <div>
                            <h1 class="text-2xl font-bold text-gray-900 dark:text-white">@Model.Quiz.Title</h1>
                            <p class="text-gray-600 dark:text-gray-400 mt-1">@Model.Quiz.Description</p>
                        </div>
                        <div class="text-right">
                            <div class="text-sm text-gray-500 dark:text-gray-400">Time Remaining</div>
                            <div id="timer" class="text-2xl font-bold text-red-600 dark:text-red-400">
                                @timeRemaining:00
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Progress Bar -->
                <div class="px-6 pb-6">
                    <div class="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400 mb-2">
                        <span>Progress</span>
                        <span id="progressText">0/@Model.Quiz.Questions.Count questions answered</span>
                    </div>
                    <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                        <div id="progressBar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                </div>
            </div>

            <!-- Quiz Form -->
            <form id="quizForm" asp-action="Submit" method="post" class="space-y-8">
                <input type="hidden" name="attemptId" value="@Model.Id" />
                
                @foreach (var question in Model.Quiz.Questions.OrderBy(q => q.Order))
                {
                    <div class="question-container bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6" data-question-id="@question.Id">
                        <div class="mb-4">
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">
                                Question @question.Order
                                @if (question.IsRequired)
                                {
                                    <span class="text-red-500">*</span>
                                }
                            </h3>
                            <p class="text-gray-700 dark:text-gray-300 text-lg">@question.QuestionText</p>
                            <div class="flex items-center space-x-4 mt-2 text-sm text-gray-500 dark:text-gray-400">
                                <span>Points: @question.Points</span>
                                <span>Type: @question.QuestionType</span>
                            </div>
                        </div>

                        <div class="space-y-3">
                            @switch (question.QuestionType)
                            {
                                case QuestionType.MultipleChoice:
                                    @foreach (var option in question.Options.OrderBy(o => o.Order))
                                    {
                                        <label class="flex items-center p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors">
                                            <input type="radio" name="answers[@question.Id]" value="@option.Id" 
                                                   class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <span class="ml-3 text-gray-700 dark:text-gray-300">@option.OptionText</span>
                                        </label>
                                    }
                                    break;

                                case QuestionType.TrueFalse:
                                    <div class="space-y-3">
                                        <label class="flex items-center p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors">
                                            <input type="radio" name="answers[@question.Id]" value="true" 
                                                   class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <span class="ml-3 text-gray-700 dark:text-gray-300">True</span>
                                        </label>
                                        <label class="flex items-center p-3 border border-gray-200 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer transition-colors">
                                            <input type="radio" name="answers[@question.Id]" value="false" 
                                                   class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                            <span class="ml-3 text-gray-700 dark:text-gray-300">False</span>
                                        </label>
                                    </div>
                                    break;

                                case QuestionType.ShortAnswer:
                                    <textarea name="answers[@question.Id]" rows="3" 
                                              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                                              placeholder="Enter your answer"></textarea>
                                    break;

                                case QuestionType.Essay:
                                    <textarea name="answers[@question.Id]" rows="6" 
                                              class="w-full px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent dark:bg-gray-700 dark:text-white"
                                              placeholder="Enter your detailed answer"></textarea>
                                    break;
                            }
                        </div>
                    </div>
                }

                <!-- Navigation and Submit -->
                <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg border border-gray-200 dark:border-gray-700 p-6">
                    <div class="flex items-center justify-between">
                        <div class="flex space-x-4">
                            <button type="button" onclick="previousQuestion()" id="prevBtn" 
                                    class="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
                                Previous
                            </button>
                            <button type="button" onclick="nextQuestion()" id="nextBtn" 
                                    class="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                                Next
                            </button>
                        </div>
                        <div class="flex space-x-4">
                            <button type="button" onclick="saveProgress()" 
                                    class="px-4 py-2 text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors">
                                Save Progress
                            </button>
                            <button type="submit" 
                                    class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 focus:ring-4 focus:ring-green-300 transition-colors">
                                Submit Quiz
                            </button>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div id="submitModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
    <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-md w-full">
            <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                <h3 class="text-xl font-semibold text-gray-900 dark:text-white">Submit Quiz</h3>
            </div>
            <div class="p-6">
                <p class="text-gray-700 dark:text-gray-300 mb-4">Are you sure you want to submit your quiz? This action cannot be undone.</p>
                <div class="flex space-x-4">
                    <button type="button" onclick="closeSubmitModal()" 
                            class="flex-1 px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 rounded-lg hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Cancel
                    </button>
                    <button type="button" onclick="confirmSubmit()" 
                            class="flex-1 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
                        Submit
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentQuestion = 0;
        let timeRemaining = @timeRemaining * 60; // Convert to seconds
        let timerInterval;
        let answeredQuestions = new Set();

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            showQuestion(0);
            startTimer();
            updateProgress();
        });

        // Timer functionality
        function startTimer() {
            timerInterval = setInterval(function() {
                timeRemaining--;
                updateTimer();
                
                if (timeRemaining <= 0) {
                    clearInterval(timerInterval);
                    alert('Time is up! Your quiz will be submitted automatically.');
                    document.getElementById('quizForm').submit();
                }
            }, 1000);
        }

        function updateTimer() {
            const minutes = Math.floor(timeRemaining / 60);
            const seconds = timeRemaining % 60;
            document.getElementById('timer').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        // Question navigation
        function showQuestion(index) {
            const questions = document.querySelectorAll('.question-container');
            questions.forEach((q, i) => {
                q.style.display = i === index ? 'block' : 'none';
            });
            
            // Update navigation buttons
            document.getElementById('prevBtn').disabled = index === 0;
            document.getElementById('nextBtn').style.display = index === questions.length - 1 ? 'none' : 'inline-block';
            
            currentQuestion = index;
        }

        function nextQuestion() {
            const questions = document.querySelectorAll('.question-container');
            if (currentQuestion < questions.length - 1) {
                showQuestion(currentQuestion + 1);
            }
        }

        function previousQuestion() {
            if (currentQuestion > 0) {
                showQuestion(currentQuestion - 1);
            }
        }

        // Progress tracking
        function updateProgress() {
            const questions = document.querySelectorAll('.question-container');
            const totalQuestions = questions.length;
            
            // Count answered questions
            answeredQuestions.clear();
            questions.forEach((question, index) => {
                const questionId = question.dataset.questionId;
                const inputs = question.querySelectorAll('input[type="radio"], input[type="checkbox"], textarea');
                let hasAnswer = false;
                
                inputs.forEach(input => {
                    if (input.type === 'radio' || input.type === 'checkbox') {
                        if (input.checked) hasAnswer = true;
                    } else if (input.type === 'textarea') {
                        if (input.value.trim() !== '') hasAnswer = true;
                    }
                });
                
                if (hasAnswer) {
                    answeredQuestions.add(index);
                }
            });
            
            const progress = (answeredQuestions.size / totalQuestions) * 100;
            document.getElementById('progressBar').style.width = progress + '%';
            document.getElementById('progressText').textContent = 
                `${answeredQuestions.size}/${totalQuestions} questions answered`;
        }

        // Save progress
        function saveProgress() {
            // This would typically save to localStorage or send to server
            localStorage.setItem('quizProgress_' + @Model.Id, JSON.stringify({
                answers: getAnswers(),
                timestamp: new Date().toISOString()
            }));
            
            // Show success message
            const button = event.target;
            const originalText = button.textContent;
            button.textContent = 'Saved!';
            button.classList.add('bg-green-100', 'text-green-700');
            
            setTimeout(() => {
                button.textContent = originalText;
                button.classList.remove('bg-green-100', 'text-green-700');
            }, 2000);
        }

        function getAnswers() {
            const answers = {};
            document.querySelectorAll('input[type="radio"]:checked, input[type="checkbox"]:checked, textarea').forEach(input => {
                const name = input.name;
                if (name) {
                    answers[name] = input.value;
                }
            });
            return answers;
        }

        // Submit functionality
        function showSubmitModal() {
            document.getElementById('submitModal').classList.remove('hidden');
        }

        function closeSubmitModal() {
            document.getElementById('submitModal').classList.add('hidden');
        }

        function confirmSubmit() {
            document.getElementById('quizForm').submit();
        }

        // Form submission
        document.getElementById('quizForm').addEventListener('submit', function(e) {
            e.preventDefault();
            showSubmitModal();
        });

        // Track answer changes
        document.addEventListener('change', function(e) {
            if (e.target.matches('input[type="radio"], input[type="checkbox"], textarea')) {
                updateProgress();
            }
        });

        // Keyboard navigation
        document.addEventListener('keydown', function(e) {
            if (e.key === 'ArrowRight' || e.key === ' ') {
                e.preventDefault();
                nextQuestion();
            } else if (e.key === 'ArrowLeft') {
                e.preventDefault();
                previousQuestion();
            }
        });

        // Auto-save every 30 seconds
        setInterval(saveProgress, 30000);
    </script>
} 